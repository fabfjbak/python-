if之间是相互独立的，顺序执行，if else是互斥的，二选一
变量在函数内部值会改变，并且这种改变会影响后续的条件判断。
>>> def bake(cake, make):
...     if cake == 0:
...         cake = cake + 1
...         print(cake)
...     if cake == 1:
...         print(make)
...     else:
...         return cake
...     return make

>>> bake(0, 29)
输出：
1
29
29

函数可以当做参数传递，def这一行是看不出是不是函数，这样传递仅传递函数关系，不传递具体值
def product(n, term):
    """Return the product of the first n terms in a sequence.

    n: a positive integer
    term:  a function that takes one argument to produce the term

    >>> product(3, identity)  # 1 * 2 * 3
    6
    >>> product(5, identity)  # 1 * 2 * 3 * 4 * 5
    120
    >>> product(3, square)    # 1^2 * 2^2 * 3^2
    36
    >>> product(5, square)    # 1^2 * 2^2 * 3^2 * 4^2 * 5^2
    14400
    >>> product(3, increment) # (1+1) * (2+1) * (3+1)
    24
    >>> product(3, triple)    # 1*3 * 2*3 * 3*3
    162
    """
    "*** YOUR CODE HERE ***"
    k=1
    for i in range(1,n+1):
        k=term(i)*k
    return k

变量传递函数（square = make_power_of(2)这一步相当于把n等于2记住的内部函数传递给了外面，更适合封装）
def make_power_of(n):
    # 外部函数参数 n 被内部函数捕获
    def power(x):
        return x ** n
    return power

# 创建一个可以计算平方的函数
square = make_power_of(2)
print(square(5)) # 输出: 25

# 创建一个可以计算立方的函数
cube = make_power_of(3)
print(cube(5)) # 输出: 125


return函数名不带（）就是函数本身逻辑，如果带了（）就是调用，要出值


























