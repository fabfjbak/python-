def interleaved_sum(n, odd_func, even_func):
    """计算 odd_func(1) + even_func(2) + odd_func(3) + ... 的和，
    直到 n。

    >>> identity = lambda x: x
    >>> square = lambda x: x * x
    >>> triple = lambda x: x * 3
    >>> interleaved_sum(5, identity, square) # 1   + 2*2 + 3   + 4*4 + 5
    29
    >>> interleaved_sum(5, square, identity) # 1*1 + 2   + 3*3 + 4   + 5*5
    41
    >>> interleaved_sum(4, triple, square)   # 1*3 + 2*2 + 3*3 + 4*4
    32
    >>> interleaved_sum(4, square, triple)   # 1*1 + 2*3 + 3*3 + 4*3
    28
    >>> from construct_check import check
    >>> check(HW_SOURCE_FILE, 'interleaved_sum', ['While', 'For', 'Mod']) # 禁止循环和 % 运算符
    True
    >>> check(HW_SOURCE_FILE, 'interleaved_sum', ['BitAnd', 'BitOr', 'BitXor']) # 禁止位运算符，如果您不知道它们是什么，请不用担心
    True
    """
    # 定义一个内部辅助函数，用于处理奇数项的求和
    def odd_term_sum(k):
        # 基本情况：如果当前数字 k 超过了 n，则停止并返回 0
        if k > n:
            return 0
        # 递归步骤：将 odd_func 应用于当前奇数 k，并加上从 k+1 开始的偶数项的和
        return odd_func(k) + even_term_sum(k + 1)

    # 定义一个内部辅助函数，用于处理偶数项的求和
    def even_term_sum(k):
        # 基本情况：如果当前数字 k 超过了 n，则停止并返回 0
        if k > n:
            return 0
        # 递归步骤：将 even_func 应用于当前偶数 k，并加上从 k+1 开始的奇数项的和
        return even_func(k) + odd_term_sum(k + 1)

    # 从 1 开始调用 odd_term_sum，因为 1 是一个奇数
    return odd_term_sum(1)

